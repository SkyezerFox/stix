// whitespace
BLANK = _{ " " | "\t" }
WHITESPACE = _{ BLANK | NEWLINE }
// comments
line_comment = { "#" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI) }
block_comment = { "/*" ~ ANY* ~ "*/" }
COMMENT = _{ block_comment | line_comment }

int_hex = _{ num_base_hex ~ num_hex }
int_dec = _{ num_base_dec ~ num_dec }
int_oct = _{ num_base_oct ~ num_oct }
int_bin = _{ num_base_bin ~ num_bin }

int_with_base = _{ 
	int_hex |
    int_dec |
    int_oct |
    int_bin
}

int_default = _{ num_dec }
int = ${ num_negated? ~ (int_with_base | int_default) }

float_dp = { "." }

float_hex = _{ num_base_hex ~ num_hex? ~ float_dp ~ num_hex }
float_dec = _{ num_base_dec ~ num_dec? ~ float_dp ~ num_dec }
float_oct = _{ num_base_oct ~ num_oct? ~ float_dp ~ num_oct }
float_bin = _{ num_base_bin ~ num_bin? ~ float_dp ~ num_bin }

float_with_base = _{
	float_hex |
    float_dec |
    float_oct |
    float_bin
}

float_exponent_char = _{ "e" }
float_exponent = { float_exponent_char ~ num_negated? ~ num_dec }
float_default = _{ 
    num_dec? ~ float_dp ~ num_dec ~ float_exponent? |
	num_dec ~ float_exponent
}

float = ${ num_negated? ~ (float_with_base | float_default) }

raw_char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
char_inner = @{ raw_char }
char = ${ "'" ~ char_inner ~ "'" }

string_inner = @{ raw_char* }
string = ${ "\"" ~ string_inner ~ "\"" }

literal = {
    float |
    int |
    string |
    char
}


num_negated = { "-" }

// num base digits
num_hex = { ASCII_HEX_DIGIT+ }
num_dec = { ASCII_DIGIT+ }
num_oct = { '0'..'7'+ }
num_bin = { '0'..'1'+ }

// base prefixes
num_base_hex = _{ "0x" }
num_base_dec = _{ "0d" }
num_base_oct = _{ "0o" }
num_base_bin = _{ "0b" }

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
block = { "{" ~ stmts ~ "}" }

bin_op = { "/" | "*" | "+" | "-" }
bin_exp = { (("(" ~ expression ~ ")") | expression) ~ bin_op ~  "("? ~ expression ~ ")"? }

expression = { ident | literal | block }

assignment_operator = { "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" }
assignment = !{ (ident ~ ",")* ~ ident ~ assignment_operator ~ (expression ~ ",")* ~ expression }

declaration = !{ "let" ~ (ident ~ ",")* ~ ident ~ "=" ~ (expression ~ ",")* ~ expression }
func_return = !{ "return" ~ expression }

loop_block = !{ "loop" ~ block }

if_block = !{ "if" ~ expression ~ block }

statement = _{ 
	loop_block |
	if_block |
    assignment |
    declaration |
    func_return
}

line = @{ (statement ~ BLANK* ~ ";" ~ BLANK* ~ &statement)* ~ BLANK* ~ statement ~ BLANK* ~ ";"? }
stmts = @{ (line ~ NEWLINE+ ~ &line)* ~ line ~ NEWLINE* }

styx = _{ SOI ~ stmts? ~ EOI }
