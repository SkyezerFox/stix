// whitespace
BLANK = _{ " " | "\t" }
WHITESPACE = _{ BLANK | NEWLINE }
// comments
line_comment = { "#" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI) }
block_comment = { "/*" ~ ANY* ~ "*/" }
COMMENT = _{ block_comment | line_comment }

num_negated = { "-" }

// num base digits
num_hex = { ASCII_HEX_DIGIT+ }
num_dec = { ASCII_DIGIT+ }
num_oct = { '0'..'7'+ }
num_bin = { '0'..'1'+ }

// base prefixes
num_base_hex = _{ "0x" }
num_base_dec = _{ "0d" }
num_base_oct = _{ "0o" }
num_base_bin = _{ "0b" }

int_hex = _{ num_base_hex ~ num_hex }
int_dec = _{ num_base_dec ~ num_dec }
int_oct = _{ num_base_oct ~ num_oct }
int_bin = _{ num_base_bin ~ num_bin }

int_with_base = _{ 
	int_hex |
    int_dec |
    int_oct |
    int_bin
}

int_default = _{ num_dec }
int = @{ num_negated? ~ (int_with_base | int_default) }

float_dp = { "." }

float_hex = _{ num_base_hex ~ num_hex? ~ float_dp ~ num_hex }
float_dec = _{ num_base_dec ~ num_dec? ~ float_dp ~ num_dec }
float_oct = _{ num_base_oct ~ num_oct? ~ float_dp ~ num_oct }
float_bin = _{ num_base_bin ~ num_bin? ~ float_dp ~ num_bin }

float_with_base = _{
	float_hex |
    float_dec |
    float_oct |
    float_bin
}

float_exponent_char = _{ "e" }
float_exponent = { float_exponent_char ~ num_negated? ~ num_dec }
float_default = _{ 
    num_dec? ~ float_dp ~ num_dec ~ float_exponent? |
	num_dec ~ float_exponent
}

float = @{ num_negated? ~ (float_with_base | float_default) }

raw_char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
char_inner = @{ raw_char }
char = ${ "'" ~ char_inner ~ "'" }

string_inner = @{ raw_char* }
string = ${ "\"" ~ string_inner ~ "\"" }

bool = { "true" | "false" }

literal = {
    float |
    int |
    string |
    char |
    bool
}

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// types
builtin_type = @{ tuple_type | "int" | "float" | "str" | "bool" | "()" }
tuple_type = !{ "(" ~ (type_ident ~ ",")* ~ type_ident ~ ")" }
type_ident = { builtin_type | ident }
referenced_type = {
	"&" ~ type_ident
}

type_bin_op_union = { "|" }
type_bin_op_intersect = { "&" }
type_bin_op = {
	type_bin_op_intersect |
    type_bin_op_union
}

type_bin_exp_inner = _{ ("(" ~ type_exp ~ ")") | type_ident }
type_bin_exp = { type_bin_exp_inner ~ (type_bin_op ~ type_bin_exp_inner)+ }
type_exp = { type_bin_exp | type_ident }

type_decl = !{ "type" ~ ident ~ "=" ~ type_exp }

block = { "{" ~ stmts? ~ "}" }

bin_exp_inner = _{ ("(" ~ expression ~ ")") | literal | ident }

bin_op_plus = { "+" }
bin_op_minus = { "-" }
bin_op_mul = { "*" }
bin_op_div = { "/" }
bin_op_mod = { "%" }
bin_op_eq = { "==" }
bin_op_ne = { "!=" }
bin_op_lt = { "<" }
bin_op_gt = { ">" }
bin_op_le = { "<=" }
bin_op_ge = { ">=" }
bin_op_and = { "&" }
bin_op_xor = { "^" }
bin_op_or = { "|" }
bin_op_lshift = { "<<" }
bin_op_rshift = { ">>" }
bin_op_log_and = { "&&" }
bin_op_log_or = { "||" }

bin_op = _{ 
    bin_op_plus |
    bin_op_minus |
    bin_op_mul |
    bin_op_div |
    bin_op_mod |
    bin_op_eq |
    bin_op_ne |
    bin_op_lt |
    bin_op_gt |
    bin_op_le |
    bin_op_ge |
    bin_op_and |
    bin_op_xor |
    bin_op_or |
    bin_op_lshift |
    bin_op_rshift |
    bin_op_log_and |
    bin_op_log_or
}

bin_exp = { bin_exp_inner ~ (bin_op ~ bin_exp_inner)+ }

expression = { func_call | bin_exp | literal | ident | block }

assignment_op = { "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" }
assignment = !{ (ident ~ ",")* ~ ident ~ assignment_op ~ (expression ~ ",")* ~ expression }

declaration_type = { ":" ~ type_ident }
declaration = !{ "let" ~ (ident ~ ",")* ~ ident ~ declaration_type? ~ "=" ~ (expression ~ ",")* ~ expression }
mut_declaration = !{ "mut" ~ (ident ~ ",")* ~ ident ~ declaration_type? ~ "=" ~ (expression ~ ",")* ~ expression }

func_return = !{ "return" ~ expression }
func_param = !{ ident ~ ":" ~ type_ident }
func_params = !{ ("(" ~ (func_param ~ ",")* ~ func_param ~ ")") | func_param }
func_decl_inline = !{ ident ~ func_params? ~ "->" ~ statement }
func_decl_block = !{ ident ~ func_params? ~ "->" ~ block }
func_decl = { func_decl_block | func_decl_inline }

func_call_params = ${ (expression ~ ",")* ~ expression }
func_call = !{ ident ~ func_call_params | ident ~ "()" }

extern_func = !{ "extern" ~ ident ~ func_params? ~ "->" ~ type_ident }

while_block = !{ "while" ~ expression ~ block }
loop_block = !{ "loop" ~ block }

if_block = !{ "if" ~ expression ~ block }
if_else_block = !{ if_block ~ "else" ~ block }

statement = _{ 
	while_block |
	loop_block |
    if_else_block |
	if_block |
    func_decl |
    extern_func |
	func_return |
    type_decl |
    assignment |
    declaration |
    mut_declaration |
    func_call |
    func_return
}

line = @{ (statement ~ BLANK* ~ ";" ~ BLANK* ~ &statement)* ~ BLANK* ~ statement ~ BLANK* ~ ";"? }
stmts = @{ (line ~ NEWLINE+ ~ &line)* ~ line ~ NEWLINE* }

styx = _{ SOI ~ stmts? ~ EOI }
