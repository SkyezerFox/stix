WHITESPACE = _{ " " }

ident = { ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

////////////////////////////////
// Primitives
////////////////////////////////

num_negated = { "-" }
num_hex = { ASCII_HEX_DIGIT+ }
num_dec = { ASCII_DIGIT+ }
num_oct = { '0'..'7'+ }
num_bin = { '0'..'1'+ }

num_base_hex = _{ "0x" }
num_base_dec = _{ "0d" }
num_base_oct = _{ "0o" }
num_base_bin = _{ "0b" }

num_base = { num_base_hex | num_base_dec | num_base_oct | num_base_bin }

int_hex = _{ num_base_hex ~ num_hex }
int_dec = _{ num_base_dec ~ num_dec }
int_oct = _{ num_base_oct ~ num_oct }
int_bin = _{ num_base_bin ~ num_bin }

int_with_base = _{ 
	int_hex |
    int_dec |
    int_oct |
    int_bin
}
int_default = _{ num_dec }
int = ${ num_negated? ~ (int_with_base | int_default) }

float_dp = { "." }

float_hex = _{ num_base_hex ~ num_hex? ~ float_dp ~ num_hex }
float_dec = _{ num_base_dec ~ num_dec? ~ float_dp ~ num_dec }
float_oct = _{ num_base_oct ~ num_oct? ~ float_dp ~ num_oct }
float_bin = _{ num_base_bin ~ num_bin? ~ float_dp ~ num_bin }

float_with_base = _{
	float_hex |
    float_dec |
    float_oct |
    float_bin
}

float_exponent_char = _{ "e" }
float_exponent = { float_exponent_char ~ num_negated? ~ num_dec }
float_default = _{ 
    num_dec? ~ float_dp ~ num_dec ~ float_exponent? |
	num_dec ~ float_exponent
}

float = ${ num_negated? ~ (float_with_base | float_default) }

// char
raw_char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
char_inner = @{ raw_char }
char = ${ "'" ~ char_inner ~ "'" }

// string
string_inner = @{ raw_char* }
string = ${ "\"" ~ string_inner ~ "\"" }

literal = _{ float | int | char | string } 

////////////////////////////////
// Operations
////////////////////////////////

// binary operations

binary_op_add = { "+" }
binary_op_sub = { "-" }
binary_op_mul = { "*" }
binary_op_div = { "/" }
binary_op_mod = { "%" }
binary_op_and = { "&" }
binary_op_or = { "|" }
binary_op_xor = { "^" }
binary_op_shl = { "<<" }
binary_op_shr = { ">>" }
binary_op_eq = { "==" }
binary_op_neq = { "!=" }
binary_op_lt = { "<" }
binary_op_lte = { "<=" }
binary_op_gt = { ">" }
binary_op_gte = { ">=" }

// TODO: BIDMAS
binary_op = _{ 
    binary_op_add |
    binary_op_sub |
    binary_op_mul |
    binary_op_div |
    binary_op_mod |
    binary_op_and |
    binary_op_or |
    binary_op_xor |
    binary_op_shl |
    binary_op_shr |
    binary_op_eq |
    binary_op_neq |
    binary_op_lt |
    binary_op_lte |
    binary_op_gt |
    binary_op_gte
}

binary_operation = { binary_op_inner ~ binary_op ~ binary_op_inner }
binary_op_inner = _{ literal | "(" ~ expression ~ ")" }

operatable = _{ binary_operation | unary_operation | ident | literal   }

// unary operations
unary_op_assign = { "=" }
unary_op_plus_equals = { "+=" }
unary_op_minus_equals = { "-=" }
unary_op_times_equals = { "*=" }
unary_op_div_equals = { "/=" }
unary_op_mod_equals = { "%=" }
unary_op_and_equals = { "&=" }
unary_op_or_equals = { "|=" }
unary_op_xor_equals = { "^=" }
unary_op_shl_equals = { "<<=" }
unary_op_shr_equals = { ">>=" }
unary_op_incr = { "++" }
unary_op_decr = { "--" }
unary_op_not = { "!" }

unary_op = {
    unary_op_assign |
    unary_op_plus_equals |
    unary_op_minus_equals |
    unary_op_times_equals |
    unary_op_div_equals |
    unary_op_mod_equals |
    unary_op_and_equals |
    unary_op_or_equals |
    unary_op_xor_equals |
    unary_op_shl_equals |
    unary_op_shr_equals |
    unary_op_incr |
    unary_op_decr
}

unary_operation = { (ident ~ unary_op) | (unary_op_not ~ operatable)  }

// assignment operation
assign = { ident ~ "=" ~ operatable }

expression = { assign | literal | binary_operation | unary_operation | ident }

