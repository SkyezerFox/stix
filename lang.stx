# Variables

let x = 0
mut y = 0

# explicit data type
let z: int64 = 0

# Constants
const x = 0

# Data types

# int type
let x = 0
let y: int;

# int64
let x: int64 = 0

# int32
let x: int32 = 0

# int16
let x: int16 = 0

# int8
let x: int8 = 0

# bool
let x = false
x = !x
let y = false
x &= y



# binary operators
let x, y = 15, 3;

# logical and
x & y
x &= y

# logical or
x | y
x |= y

# logical exclusive or
x ^ y
x ^= y

# logical not
!x

# rotate right 3 bits
x >> 3;
x >>= 3;

# rotate left 3 bits
x << 3;
x <<= 3;

# Structs
struct Point {
    x: int, y: int
}

add (a: Point, b: Point) -> Point { x: a.x + b.x, y: a.y + b.y } 

# tuple structs
struct Point(int, int)
add (a: Point, b: Point) -> Point(a.0 + b.0, a.1 + b.1)

# Sets
let a = { 1, 2, 3 },
    b = { 4, 5, 6 }

# operators
let x = a union b;
let x = a intersection b;
let x = a difference b;

# Maps
let x = map {
    "hello" -> 69
    "world" -> 621
}

# explicitly typed
let x = map<str, int> {

}

let x = str -> int {
    "hello" -> 621
}

print x.hello 

# Functions
x param1: A -> B
x(param1: A, param2: B) -> (B, C)

sort x: T[] -> T[]
sort x: int[] -> int[] {
    for el of x {
        # sort
    }
}

# tuple arguments
swap x, y -> (y, x)
# i.e.
swap (x, y) -> (y, x)

# Modules
# all imports and exports are named
import stdlib
import io from stdlib

# module.stx
export someFunc x: int -> x + 1
export someOtherFunc x: int -> x - 1

# main.stx
import someFunc from "./module"
import {
    someFunc
    someOtherFunc
} from "./module"
